using System;
using Microsoft.MixedReality.Toolkit.Input;
using Microsoft.MixedReality.Toolkit.UI;
using Microsoft.MixedReality.Toolkit.Utilities.Solvers;
using UnityEngine;
using UnityEngine.Events;
using Debug = UnityEngine.Debug;


[Serializable]
public class UnityForceSolverEvent : UnityEvent<ForceSolver>
{
}

public class ForceSolver : Solver, IMixedRealityFocusHandler, IMixedRealityPointerHandler
{
    public enum State
    {
        Root,
        Free,
        Attraction,
        Manipulation,
        Rejection
    }

    private ManipulationHandler _manipulationHandler;
    private Collider _attractionCollider;
    private Quaternion _rotationOffset, _previousRotation;
    private float _baseScale;
    
    public State ForceState { get; private set; }
    public Transform RootTransform;
    public ControllerTransformTracker ControllerTracker;
    public bool OffsetToObjectBoundsFromController = true;
    public Vector3 OffsetFromCameraOnNoControllerPosition;
    public ManipulationHandler ManipulationHandler;
    public Collider AttractionCollider;

    public UnityForceSolverEvent SetToRoot, SetToAttract, SetToManipulate, SetToFree;

    protected override void Awake()
    {
        base.Awake();
        
        _manipulationHandler = ManipulationHandler ? ManipulationHandler : GetComponentInChildren<ManipulationHandler>();
        Debug.Assert(_manipulationHandler != null, "Force Solver failed to find a manipulation handler");
        _attractionCollider = AttractionCollider ? AttractionCollider : GetComponentInChildren<Collider>();
        Debug.Assert(_attractionCollider != null, "Force Solver failed to find a attraction collider");
        
        _manipulationHandler.OnManipulationEnded.AddListener(OnManipulationEnd);

        if (ControllerTracker == null)
        {
            Debug.LogWarning(gameObject.name+" ForceSolver no controller tracker transform supplied will instantiate locally");
            var controllerTrackerObject = new GameObject(gameObject.name+" ForceSolver autogenerated controller tracker");
            ControllerTracker = controllerTrackerObject.AddComponent<ControllerTransformTracker>();
        }

        ControllerTracker.AllTrackingLost += OnControllersLost;
    }

    private void Start()
    {
        StartRoot();
    }

    private void OnDestroy()
    {
        ControllerTracker.AllTrackingLost -= OnControllersLost;
    }

    private void UpdateGoalsAttraction()
    {
        GoalScale = SolverHandler.TransformTarget.localScale;
        GoalPosition = SolverHandler.TransformTarget.position;
        if (OffsetToObjectBoundsFromController && !ControllerTracker.BothSides)
        {
            GoalPosition += GetOffsetPositionFromController();
        }
        GoalRotation = SolverHandler.TransformTarget.rotation * _rotationOffset;
        UpdateWorkingPositionToGoal();
        UpdateWorkingRotationToGoal();
    }

    private Vector3 GetOffsetPositionFromController()
    {
        var controllerFwd = ControllerTracker.transform.forward;
        var position = transform.position;
        var ray = new Ray(position-controllerFwd*100, controllerFwd);
        var hit = _attractionCollider.Raycast(ray, out var hitInfo, 150);
        Debug.Assert(hit);
        return position - hitInfo.point;
    }

    private void StartRoot()
    {
        if (ForceState == State.Root)
        {
            return;
        }
        ForceState = State.Root;
        _manipulationHandler.enabled = false;
        SolverHandler.TransformTarget = RootTransform;
        OnStartRoot();
        SetToRoot?.Invoke(this);
    }

    protected virtual void OnStartRoot()
    {
    }

    private void StartAttraction()
    {
        ForceState = State.Attraction;
        SolverHandler.TransformTarget = ControllerTracker.transform;
        var worldToPalmRotation = Quaternion.Inverse(SolverHandler.TransformTarget.rotation);
        _rotationOffset = worldToPalmRotation * transform.rotation;
        OnStartAttraction();
        SetToAttract?.Invoke(this);
    }
    
    protected virtual void OnStartAttraction()
    {
    }

    private void StartManipulation()
    {
        ForceState = State.Manipulation;
        SolverHandler.TransformTarget = ControllerTracker.transform;
        _manipulationHandler.enabled = true;
        OnStartManipulation();
        SetToManipulate?.Invoke(this);
    }
    
    protected virtual void OnStartManipulation()
    {
    }

    private void StartFree()
    {
        ForceState = State.Free;
        SolverHandler.TransformTarget = ControllerTracker.transform;
        _manipulationHandler.enabled = false;
        OnStartFree();
        SetToFree?.Invoke(this);
    }
    
    protected virtual void OnStartFree()
    {
    }
    
    private void OnManipulationEnd(ManipulationEventData _)
    {
        StartFree();   
    }

    private void OnControllersLost()
    {
        switch (ForceState)
        {
            case State.Attraction:
                StartRoot();
                break;
        }
    }

    public override void SolverUpdate()
    {
        switch (ForceState)
        {
            case State.Root:
                SnapTo(RootTransform.position, RootTransform.rotation);
                break;
            case State.Free:
                // do nothing
                break;
            case State.Attraction:
                UpdateGoalsAttraction();
                break;
            case State.Manipulation:
                // do nothing
                break;
            case State.Rejection:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    public void OnBeforeFocusChange(FocusEventData eventData)
    {
        throw new System.NotImplementedException();
    }

    public void OnFocusChanged(FocusEventData eventData)
    {
        throw new System.NotImplementedException();
    }

    public virtual void OnFocusEnter(FocusEventData eventData)
    {
        Debug.Log("On focus enter");
        var controller = eventData.Pointer.Controller;
        // if the focus is the gaze then there is no controller
        if(controller == null) return;
        switch (ForceState)
        {
            case State.Root:
                if (controller.IsInPointingPose && controller.IsPositionAvailable)
                {
                    StartAttraction();
                }
                break;
            case State.Attraction:
                if (!controller.IsInPointingPose)
                {
                    StartManipulation();
                }
                break;
            case State.Free:
            case State.Manipulation:
            case State.Rejection:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    public virtual void OnFocusExit(FocusEventData eventData)
    {
    }

    public void OnPointerUp(MixedRealityPointerEventData eventData)
    {
    }

    public void OnPointerDown(MixedRealityPointerEventData eventData)
    {
        switch (ForceState)
        {
            case State.Root:
                StartAttraction();
                break;
            case State.Attraction:
            case State.Free:
                StartManipulation();
                _manipulationHandler.OnPointerDown(eventData);
                break;
            case State.Manipulation:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    public void OnPointerClicked(MixedRealityPointerEventData eventData)
    {
    }

    public void ResetToRoot()
    {
        StartRoot();
    }
}
